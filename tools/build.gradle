apply plugin: "java"

sourceCompatibility = 1.8
sourceSets.main.java.srcDirs = [ "src/" ]


import java.util.concurrent.Callable
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors

import com.badlogic.gdx.tools.texturepacker.TexturePacker
import com.badlogic.gdx.utils.*
import com.badlogic.gdx.files.*
import com.badlogic.gdx.Files

def textureFolder = "../core/assets-raw/sprites/generated/"

task antialiasImages(){
    doLast{
        for(def img : project.getProperty("images").split(",")){
            println(project.getProperty("startdir") + "/" + img)
            antialias(new File(project.getProperty("startdir") + "/" + img))
        }
    }
}

task tileImages(){
    doLast{
        for(def img : project.getProperty("images").split(",")){
            println(project.getProperty("startdir") + "/" + img)
            tileImage(new File(project.getProperty("startdir") + "/" + img))
        }
    }
}

task pack(){
    dependsOn 'prePack'

    doLast {
        TexturePacker.process("core/assets-raw/sprites/", "core/assets/sprites/", "sprites.atlas")

        delete{
            delete textureFolder
        }
    }
}

task prePack(){
    dependsOn "cleanup"

    doLast{
        TexturePacker.process("core/assets-raw/sprites/", "core/assets/sprites/", "sprites.atlas")
    }

    finalizedBy 'generateSprites'
}

task cleanup(){
    delete{
        delete textureFolder
    }
}

task generateSprites(dependsOn: classes, type: JavaExec) {
    file(textureFolder).mkdirs()

    main = "io.acemany.mindustryV4.PackerLauncher"
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = textureFolder
}

task fontgen(dependsOn: classes, type: JavaExec){
    main = "mindustry.tools.FontGenerator"
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = "../"
}

task icongen(dependsOn: classes, type: JavaExec){
    main = "mindustry.tools.IconConverter"
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = "../core/assets-raw"
}

task updateScripts(dependsOn: classes, type: JavaExec){
    main = "mindustry.tools.ScriptMainGenerator"
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = "../"
}

task updateBundles{
    doLast{
        def uniEscape = { String string ->
            StringBuilder outBuffer = new StringBuilder();
            int len = string.length();
            for(int i = 0; i < len; i++){
                char ch = string.charAt(i);
                if((ch > 61) && (ch < 127)){
                    outBuffer.append(ch == '\\' ? "\\\\" : ch);
                    continue;
                }

                if(ch >= 0xE000){
                    String hex = Integer.toHexString((int)ch);
                    outBuffer.append("\\u");
                    for(int j = 0; j < 4 - hex.length(); j++){
                        outBuffer.append('0');
                    }
                    outBuffer.append(hex);
                }else{
                    outBuffer.append(ch);
                }
            }

            return outBuffer.toString();
        }

        OrderedMap<String, String> base = new OrderedMap<>();
        PropertiesUtils.load((ObjectMap<String, String>)base, new FileHandle("core/assets/bundles/bundle.properties", Files.FileType.Local).reader());
        Array<String> removals = new Array<>();

        def updateBundle = {FileHandle child ->
            if(child.name().equals("bundle.properties") || child.toString().contains("output")) return;

            println("\nParsing bundle: " + child);

            OrderedMap<String, String> other = new OrderedMap<>();

            //find the last known comment of each line
            ObjectMap<String, String> comments = new ObjectMap<>();
            StringBuilder curComment = new StringBuilder();

            for(String line : Array.with(child.readString().split("\n", -1))){
                if(line.startsWith("#") || line.isEmpty()){
                    curComment.append(line).append("\n");
                }else if(line.contains("=")){
                    String lastKey = line.substring(0, line.indexOf("=")).trim();
                    if(curComment.length() != 0){
                        comments.put(lastKey, curComment.toString());
                        curComment.setLength(0);
                    }
                }
            }

            OrderedMap<String, String> extras = new OrderedMap<>();
            PropertiesUtils.load((ObjectMap<String, String>)other, child.reader());
            removals.clear();

            for(String key : other.orderedKeys()){
                if(!base.containsKey(key) && key.contains(".details")){
                    extras.put(key, other.get(key));
                }else if(!base.containsKey(key)){
                    removals.add(key);
                    println("[I] Removing unused key '" + key + "'...");
                }
            }
            println("--- " + removals.size + " keys removed.");
            for(String s : removals){
                other.remove(s);
            }

            int added = 0;

            for(String key : base.orderedKeys()){
                if(other.get(key) == null || other.get(key).trim().isEmpty()){
                    other.put(key, base.get(key));
                    added++;
                    println("[I] Adding missing key '" + key + "'...");
                }
            }

            Callable<String> processor = { key, value ->
                (comments.containsKey(key) ? comments.get(key) : "") + //append last known comment if present
                        (key + " =" + (value.trim().isEmpty() ? "" : " ") + uniEscape(value)).replace("\n", "\\n") + "\n";}
            FileHandle output = child.sibling("output/" + child.name());

            println("--- " + added + " keys added.");
            println("Writing bundle to " + output);
            StringBuilder result = new StringBuilder();

            //add everything ordered
            for(String key : base.orderedKeys() + extras.keys().toArray()){
                if(other.get(key) == null) continue;

                result.append(processor(key, other.get(key)));
                other.remove(key);
            }

            child.writeString(result.toString(), false);
        }

        for (FileHandle file : new FileHandle("core/assets/bundles", Files.FileType.Local).list()){
            updateBundle(file)
        };
    }
}
